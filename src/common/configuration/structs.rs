use std::{
    error,
    fmt,
    fs,
    io,
    path::{Path, PathBuf},
};

use serde::{Deserialize, Serialize};
use toml;

#[derive(Debug)]
pub enum ConfigError {
    Filesystem { filepath: PathBuf, err: io::Error },
    TOMLDecode { filepath: PathBuf, err: toml::de::Error },
}

impl fmt::Display for ConfigError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        match self {
            ConfigError::Filesystem { filepath, err } => {
                write!(f, "Error reading from filesystem: {}, err was: {}", filepath.display(), err)
            },
            ConfigError::TOMLDecode { filepath, err } => write!(f, "Error decoding from TOML: {}, err was: {}", filepath.display(), err),
        }
    }
}

impl error::Error for ConfigError {
    fn source(&self) -> Option<&(dyn error::Error + 'static)> {
        match self {
            ConfigError::Filesystem { err, .. } => Some(err),
            ConfigError::TOMLDecode { err, .. } => Some(err),
        }
    }
}

#[derive(Deserialize, Serialize, Clone, Debug)]
#[allow(clippy::large_enum_variant)]
pub struct Config {
    pub worldserver: Option<WorldserverConfig>,
}

impl Config {
    pub fn toml_from_filepath<C: serde::de::DeserializeOwned, P: AsRef<Path>>(filepath: P) -> Result<C, ConfigError> {
        let contents = match fs::read_to_string(filepath.as_ref()) {
            Err(e) => {
                return Err(ConfigError::Filesystem {
                    filepath: filepath.as_ref().to_owned(),
                    err:      e,
                })
            },
            Ok(s) => s,
        };
        match toml::from_str(contents.as_str()) {
            Err(e) => Err(ConfigError::TOMLDecode {
                filepath: filepath.as_ref().to_owned(),
                err:      e,
            }),
            Ok(c) => Ok(c),
        }
    }
}

structstruck::strike! {
  #[strikethrough[derive(Deserialize, Serialize, Clone, Debug,  PartialEq)]]
  #[strikethrough[allow(non_snake_case)]]
  pub struct WorldserverConfig {
    pub RealmID: u32,
    pub DataDir: String,
    pub LogsDir: String,
    pub TempDir: String,
    pub LoginDatabaseInfo: DatabaseInfo,
    pub WorldDatabaseInfo: DatabaseInfo,
    pub CharacterDatabaseInfo: DatabaseInfo,
    pub Database: struct {
      pub Reconnect: struct {
        pub Seconds: u8,
        pub Attempts: u8,
      }
    },
    /// MaxPingTime In minutes
    pub MaxPingTime: i32,
    pub WorldServerPort: String,
    pub BindIP: String,
    // CMakeCommand String = ""
    // BuildDirectory String = ""
    // SourceDirectory String = ""
    // MySQLExecutable String = ""
    pub ThreadPool: i32,
    pub IPLocationFile: String,
    pub AllowLoggingIPAddressesInDatabase: bool,
    pub UseProcessors: i32,
    pub ProcessPriority: bool,
    pub Compression: i32,
    pub PlayerLimit: i32,
    pub SaveRespawnTimeImmediately: bool,
    pub MaxOverspeedPings: i32,
    pub CloseIdleConnections: bool,
    pub SocketTimeOutTime: i32,
    pub SocketTimeOutTimeActive: i32,
    pub SessionAddDelay: i32,
    pub MapUpdateInterval: i32,
    pub ChangeWeatherInterval: i32,
    pub PlayerSaveInterval: i32,
    pub PlayerSave: struct {
      pub Stats: struct PlayerSaveStats {
        pub MinLevel: i32,
        pub SaveOnlyOnLogout: bool,
      }
    },
    pub vmap: struct {
      pub enableLOS: bool,
      pub enableHeight: bool,
      pub petLOS: bool,
      pub BlizzlikePvPLOS: bool,
      pub enableIndoorCheck: bool,
    },
    pub DetectPosCollision: bool,
    pub CheckGameObjectLoS: bool,
    pub TargetPosRecalculateRange: f64,
    pub UpdateUptimeInterval: i32,
    pub LogDB: struct {
      pub Opt: struct {
        pub ClearInterval: i32,
        pub ClearTime: i32,
      },
    },
    pub MaxCoreStuckTime: i32,
    pub AddonChannel: bool,
    pub MapUpdate: struct { pub Threads: i32 },
    pub CleanCharacterDB: bool,
    pub PersistentCharacterCleanFlags: i32,
    pub PreloadAllNonInstancedMapGrids: bool,
    pub SetAllCreaturesWithWaypointMovementActive: bool,
    pub PidFile: Option<String>,
    pub PacketLogFile: String,
    pub GameType: i32,
    pub RealmZone: i32,
    pub World: struct { pub RealmAvailability: bool, },
    pub StrictPlayerNames: i32,
    pub StrictCharterNames: i32,
    pub StrictPetNames: i32,
    pub DBC: struct{ pub Locale: i32 },
    pub DeclinedNames: bool,
    pub Expansion: i32,
    pub MinPlayerName: i32,
    pub MinCharterName: i32,
    pub MinPetName: i32,
    pub Guild: struct {
      pub CharterCost: i32,
      pub EventLogRecordsCount: i32,
      pub ResetHour: i32,
      pub BankEventLogRecordsCount: i32,
      pub AllowMultipleGuildMaster: bool,
      pub BankInitialTabs: i32,
      pub BankTabCost0: i32,
      pub BankTabCost1: i32,
      pub BankTabCost2: i32,
      pub BankTabCost3: i32,
      pub BankTabCost4: i32,
      pub BankTabCost5: i32,
    },
    pub ArenaTeam: struct {
      pub CharterCost: struct {
        #[serde(rename = "2v2")]
        pub T_2v2 :i32,
        #[serde(rename = "3v3")]
        pub T_3v3 :i32,
        #[serde(rename = "5v5")]
        pub T_5v5 :i32,
      },
    },
    pub MaxWhoListReturns: i32,
    pub CharacterCreating: struct {
      pub MinLevelForHeroicCharacter: i32,
      pub Disabled: struct {
        /// Disable character creation for players based on faction
        pub DisableFaction: i32,
        /// Mask of races which cannot be created by players
        pub RaceMask: i32,
        /// Mask of classes which cannot be created by players
        pub ClassMask: i32,
      },
    },
    pub CharactersPerAccount: i32,
    pub CharactersPerRealm: i32,
    pub HeroicCharactersPerRealm: i32,
    pub SkipCinematics: i32,
    pub MaxPlayerLevel: i32,
    pub MinDualSpecLevel: i32,
    pub StartPlayerLevel: i32,
    pub StartHeroicPlayerLevel: i32,
    pub StartPlayerMoney: i32,
    pub StartHeroicPlayerMoney: i32,
    pub MaxHonorPoints: i32,
    pub MaxHonorPointsMoneyPerPoint: i32,
    pub StartHonorPoints: i32,
    pub MaxArenaPoints: i32,
    pub StartArenaPoints: i32,
    pub RecruitAFriend: struct {
      pub MaxLevel: i32,
      pub MaxDifference: i32,
    },
    pub InstantLogout: i32,
    pub PreventAFKLogout: i32,
    pub DisableWaterBreath: i32,
    pub AllFlightPaths: bool,
    pub InstantFlightPaths: i32,
    pub AlwaysMaxSkillForLevel: bool,
    pub ActivateWeather: bool,
    // CastUnstuck = 1
    pub Instance: struct {
      pub IgnoreLevel: bool,
      pub IgnoreRaid: bool,
      pub GMSummonPlayer: bool,
      pub ResetTimeHour: i32,
      pub UnloadDelay: i32,
      pub SharedNormalHeroicId: bool,
      pub ResetTimeRelativeTimestamp: i32,
    },
    pub Quests: struct {
      pub EnableQuestTracker: bool,
      pub LowLevelHideDiff: i32,
      pub HighLevelHideDiff: i32,
      pub IgnoreRaid: bool,
      pub IgnoreAutoAccept: bool,
      pub IgnoreAutoComplete: bool,
    },
    pub Calendar: struct{ pub DeleteOldEventsHour: i32 },
    pub MaxPrimaryTradeSkill: i32,
    pub MinPetitionSigns: i32,
    pub MaxGroupXPDistance: i32,
    pub MaxRecruitAFriendBonusDistance: i32,
    pub MailDeliveryDelay: i32,
    pub OffhandCheckAtSpellUnlearn: bool,
    pub ClientCacheVersion: i32,
    pub Event: pub struct{ pub Announce: bool },
    pub BeepAtStart: bool,
    pub FlashAtStart: bool,
    pub Motd: String,
    pub Server: pub struct{ pub LoginInfo: i32 },
    pub Command: pub struct{ pub LookupMaxResults: i32 },
    pub AllowTickets: bool,
    pub DeletedCharacterTicketTrace: bool,
    pub DungeonFinder: pub struct{ pub OptionsMask: i32 },
    pub AccountInstancesPerHour: i32,
    pub BirthdayTime: i32,
    pub IsContinentTransport: pub struct{ pub Enabled: bool },
    pub IsPreloadedContinentTransport: pub struct{ pub Enabled: bool },
    pub TOTPMasterSecret: String,
    pub Updates: struct {
      pub EnableDatabases: i32,
      pub AutoSetup: bool,
      pub Redundancy: bool,
      pub ArchivedRedundancy: bool,
      pub AllowRehash: bool,
      pub CleanDeadRefMaxCount: i32,
    },
    pub Warden: struct {
      pub Enabled: bool,
      pub NumMemChecks: i32,
      pub NumLuaChecks: i32,
      pub NumOtherChecks: i32,
      pub ClientResponseDelay: i32,
      pub ClientCheckHoldOff: i32,
      pub ClientCheckFailAction: i32,
      pub BanDuration: i32,
    },
    pub AllowTwoSide: struct {
      pub Accounts: bool,
      pub Interaction: struct {
        pub Calendar: bool,
        pub Chat: bool,
        pub Emote: bool,
        pub Channel: bool,
        pub Group: bool,
        pub Guild: bool,
        pub Auction: bool,
        pub Mail: bool,
      },
      pub WhoList: bool,
      pub AddFriend: bool,
      pub Trade: bool,
    },
    pub TalentsInspecting: bool,
    // ThreatRadius = 60
    pub CreatureFamilyFleeAssistanceRadius: i32,
    pub CreatureFamilyAssistanceRadius: i32,
    pub CreatureFamilyAssistanceDelay: i32,
    pub CreatureFamilyAssistancePeriod: i32,
    pub CreatureFamilyFleeDelay: i32,
    pub WorldBossLevelDiff: i32,
    pub Corpse: struct {
      pub Decay: struct CorpseDecay {
        pub NORMAL: i32,
        pub RARE: i32,
        pub ELITE: i32,
        pub RAREELITE: i32,
        pub WORLDBOSS: i32,
      },
    },
    pub Rate: struct {
      pub Corpse: struct RateCorpse { pub Decay: struct{ pub Looted: f64 } },
      pub Creature: struct RateCreature {
        pub Aggro: f64,
        pub Normal: struct {
          pub Damage: f64,
          pub SpellDamage: f64,
          pub HP: f64,
        },
        pub Elite: struct RateElite {
          pub Elite: struct RateEliteElite {
            pub Damage: f64,
            pub SpellDamage: f64,
            pub HP: f64,
          },
          pub RARE: struct {
            pub Damage: f64,
            pub SpellDamage: f64,
            pub HP: f64,
          },
          pub RAREELITE: struct {
            pub Damage: f64,
            pub SpellDamage: f64,
            pub HP: f64,
          },
          pub WORLDBOSS: struct {
            pub Damage: f64,
            pub SpellDamage: f64,
            pub HP: f64,
          },
        },
      },
      pub Health: f64,
      pub Mana: f64,
      pub Rage: struct {
        pub Income: f64,
        pub Loss: f64,
      },
      pub RunicPower: struct {
        pub Income: f64,
        pub Loss: f64,
      },
      pub Focus: f64,
      pub Energy: f64,
      pub Loyalty: f64,
      pub Skill: struct{ pub Discovery: f64, },
      pub Drop: struct {
        pub Item: struct DropItem {
          pub Poor: f64,
          pub Normal: f64,
          pub Uncommon: f64,
          pub Rare: f64,
          pub Epic: f64,
          pub Legendary: f64,
          pub Artifact: f64,
          pub Referenced: f64,
          pub ReferencedAmount: f64,
        },
        pub Money: f64,
      },
      pub RewardBonusMoney: f64,
      pub SellValue: struct {
        pub Item: struct SellValueItem {
          pub Poor: f64,
          pub Normal: f64,
          pub Uncommon: f64,
          pub Rare: f64,
          pub Epic: f64,
          pub Legendary: f64,
          pub Artifact: f64,
          pub Heirloom: f64,
        },
      },
      pub BuyValue: struct {
        pub Item: struct BuyValueItem {
          pub Poor: f64,
          pub Normal: f64,
          pub Uncommon: f64,
          pub Rare: f64,
          pub Epic: f64,
          pub Legendary: f64,
          pub Artifact: f64,
          pub Heirloom: f64,
        },
      },
      pub XP: struct {
        pub Kill: f64,
        pub Quest: struct {
          pub General: f64,
          pub DF: f64,
        },
        pub Explore: f64,
        pub Pet: f64,
        pub BattlegroundKillAV: f64,
        pub BattlegroundKillWSG: f64,
        pub BattlegroundKillAB: f64,
        pub BattlegroundKillEOTS: f64,
        pub BattlegroundKillSOTA: f64,
        pub BattlegroundKillIC: f64,
      },
      pub RepairCost: f64,
      pub Rest: struct {
        pub InGame: f64,
        pub Offline: struct {
          pub InTavernOrCity: f64,
          pub InWilderness: f64,
        },
      },
      pub Damage: struct{ pub Fall: f64, },
      pub Auction: struct {
        pub Time: f64,
        pub Deposit: f64,
        pub Cut: f64,
      },
      pub Honor: f64,
      pub ArenaPoints: f64,
      pub Talent: f64,
      pub Reputation: struct {
        pub Gain: f64,
        pub LowLevel: struct {
          pub Kill: f64,
          pub Quest: f64,
        },
        pub RecruitAFriendBonus: f64,
      },
      pub MoveSpeed: f64,
      pub InstanceResetTime: f64,
      pub Pet: struct{ LevelXP: f64, },
      pub MissChanceMultiplier: struct {
        pub TargetCreature: f64,
        pub TargetPlayer: f64,
        pub OnlyAffectsPlayer: f64,
      },
    },
    pub ListenRange: struct {
      pub Say: i32,
      pub TextEmote: i32,
      pub Yell: i32,
    },
    pub Creature: struct{ pub MovingStopTimeForPlayer: i32, },
    pub WaypointMovementStopTimeForPlayer: i32,
    pub NpcEvadeIfTargetIsUnreachable: i32,
    pub NpcRegenHPIfTargetIsUnreachable: bool,
    pub NpcRegenHPTimeIfTargetIsUnreachable: i32,
    pub Creatures: struct{ pub CustomIDs: Vec<i32>, },
    pub ChatFakeMessagePreventing: bool,
    pub ChatStrictLinkChecking: struct {
      pub Severity: i32,
      pub Kick: i32,
    },
    pub ChatFlood: struct {
      pub MessageCount: i32,
      pub MessageDelay: i32,
      pub AddonMessageCount: i32,
      pub AddonMessageDelay: i32,
      pub MuteTime: i32,
    },
    pub Chat: struct {
      pub MuteFirstLogin: bool,
      pub MuteTimeFirstLogin: i32,
    },
    pub Channel: struct {
      pub RestrictedLfg: bool,
      pub SilentlyGMJoin: bool,
      pub ModerationGMLevel: i32,
    },
    pub ChatLevelReq: struct {
      pub Channel: i32,
      pub Whisper: i32,
      pub Say: i32,
    },
    pub PartyLevelReq: i32,
    pub AllowPlayerCommands: bool,
    pub PreserveCustomChannels: bool,
    pub PreserveCustomChannelDuration: i32,
    pub GM: struct {
      pub LoginState: i32,
      pub Visible: i32,
      pub Chat: i32,
      pub WhisperingTo: i32,
      pub InGMList: struct{ pub Level: i32, },
      pub InWhoList: struct{ pub Level: i32, },
      pub StartLevel: i32,
      pub AllowInvite: bool,
      pub AllowFriend: bool,
      pub LowerSecurity: bool,
      pub TicketSystem: struct{ pub ChanceOfGMSurvey: i32, },
    },
    pub Visibility: struct {
      pub GroupMode: i32,
      pub Distance: struct {
        pub Continents: i32,
        pub Instances: i32,
        pub BGArenas: i32,
      },
      pub Notify: struct {
        pub Period: struct {
          pub OnContinents: i32,
          pub InInstances: i32,
          pub InBGArenas: i32,
        },
      },
      pub ObjectSparkles: bool,
      pub ObjectQuestMarkers: bool,
    },
    pub WaterBreath: struct{ Timer: u32 },
    pub EnableLowLevelRegenBoost: bool,
    pub SkillGain: struct {
      pub Crafting: i32,
      pub Defense: i32,
      pub Gathering: i32,
      pub Weapon: i32,
    },
    pub SkillChance: struct {
      pub Prospecting: bool,
      pub Milling: bool,
      pub Orange: i32,
      pub Yellow: i32,
      pub Green: i32,
      pub Grey: i32,
      pub MiningSteps: i32,
      pub SkinningSteps: i32,
    },
    pub DurabilityLoss: struct {
      pub InPvP: bool,
      pub OnDeath: i32,
    },
    pub DurabilityLossChance: struct {
      Damage: f64,
      Absorb: f64,
      Parry: f64,
      Block: f64,
    },
    pub Death: struct {
      pub SicknessLevel: i32,
      pub CorpseReclaimDelay: struct {
        pub PvP: bool,
        pub PvE: bool,
      },
      pub Bones: struct {
        pub World: bool,
        pub BattlegroundOrArena: bool,
      },
    },
    pub Die: struct{ pub Command: struct DieCommand{ pub Mode: bool, }, },
    pub Stats: struct {
      pub Limits: struct {
        pub Enable: bool,
        Dodge: f64,
        Parry: f64,
        Block: f64,
        Crit: f64,
      },
    },
    pub AutoBroadcast: struct {
      pub On: bool,
      pub Center: i32,
      pub Timer: i32,
      pub MinDisableLevel: i32,
    },
    pub Battleground: struct {
      pub CastDeserter: bool,
      pub QueueAnnouncer: struct BattlegroundQueueAnnouncer {
        pub Enable: bool,
        pub Limit: struct {
          pub MinLevel: u32,
          pub MinPlayers: u32,
        },
        pub SpamProtection: struct{ pub Delay: u32, },
        pub PlayerOnly: bool,
        pub Timed: bool,
        pub Timer: u32,
      },
      pub PrematureFinishTimer: u32,
      pub PremadeGroupWaitForMatch: u32,
      pub GiveXPForKills: bool,
      pub Random: struct{ pub ResetHour: i32, },
      pub StoreStatistics: struct{ pub Enable: bool, },
      pub TrackDeserters: struct{ pub Enable: bool, },
      pub InvitationType: i32,
      pub ReportAFK: struct {
        pub Number: i32,
        pub Timer: i32,
      },
      pub DisableQuestShareInBG: bool,
      pub DisableReadyCheckInBG: bool,
      pub RewardWinnerHonorFirst: i32,
      pub RewardWinnerArenaFirst: i32,
      pub RewardWinnerHonorLast: i32,
      pub RewardWinnerArenaLast: i32,
      pub RewardLoserHonorFirst: i32,
      pub RewardLoserHonorLast: i32,
      pub PlayerRespawn: i32,
      pub RestorationBuffRespawn: i32,
      pub BerserkingBuffRespawn: i32,
      pub SpeedBuffRespawn: i32,
    },
    pub Wintergrasp: struct {
      pub Enable: i32,
      pub PlayerMax: i32,
      pub PlayerMin: i32,
      pub PlayerMinLvl: i32,
      pub BattleTimer: i32,
      pub NoBattleTimer: i32,
      pub CrashRestartTimer: i32,
    },
    pub Arena: struct {
      pub MaxRatingDifference: u32,
      pub RatingDiscardTimer: u32,
      pub PreviousOpponentsDiscardTimer: u32,
      pub AutoDistributePoints: bool,
      pub AutoDistributeInterval: u32,
      pub GamesRequired: u32,
      pub QueueAnnouncer: struct {
        pub Enable: bool,
        pub PlayerOnly: bool,
      },
      pub ArenaSeason: struct {
        pub ID: u32,
        pub InProgress: bool,
      },
      pub ArenaStartRating: u32,
      pub ArenaStartPersonalRating: u32,
      pub ArenaStartMatchmakerRating: u32,
      pub ArenaWinRatingModifier1: f64,
      pub ArenaWinRatingModifier2: f64,
      pub ArenaLoseRatingModifier: f64,
      pub ArenaMatchmakerRatingModifier: f64,
    },
    // Network.Threads = 1
    // Network.OutKBuff = -1
    // Network.OutUBuff = 65536
    // Network.TcpNodelay = 1
    pub Console: struct{ pub Enable: bool, },
    pub Ra: struct {
      pub Enable: bool,
      pub IP: String,
      pub Port: String,
      pub MinLevel: i32,
    },
    pub SOAP: struct {
      pub Enabled: bool,
      pub IP: String,
      pub Port: String,
    },
    pub CharDelete: struct {
      pub Method: i32,
      pub MinLevel: i32,
      pub KeepDays: i32,
    },
    pub ItemDelete: struct {
      pub Method: i32,
      pub Vendor: i32,
      pub Quality: i32,
      pub ItemLevel: i32,
    },
    pub HonorPointsAfterDuel: i32,
    pub AlwaysMaxWeaponSkill: bool,
    pub PvPToken: struct {
      pub Enable: bool,
      pub MapAllowType: i32,
      pub ItemID: i32,
      pub ItemCount: i32,
    },
    pub NoResetTalentsCost: bool,
    pub ToggleXP: struct{ pub Cost: i32, },
    pub ShowKickInWorld: bool,
    pub ShowMuteInWorld: bool,
    pub ShowBanInWorld: bool,
    pub RecordUpdateTimeDiffInterval: i32,
    pub MinRecordUpdateTimeDiff: i32,
    pub PlayerStart: struct {
      pub String: String,
      pub AllReputation: bool,
      pub CustomSpells: bool,
      pub MapsExplored: bool,
    },
    pub LevelReq: struct {
      pub Trade: i32,
      pub Ticket: i32,
      pub Auction: i32,
      pub Mail: i32,
    },
    pub PlayerDump: struct {
      pub DisallowPaths: bool,
      pub DisallowOverwrite: bool,
    },
    pub DisconnectToleranceInterval: i32,
    pub MonsterSight: f64,
    pub StrictChannelNames: i32,
    pub TeleportTimeoutNear: i32,
    pub TeleportTimeoutFar: i32,
    pub MaxAllowedMMRDrop: i32,
    pub EnableLoginAfterDC: bool,
    pub DontCacheRandomMovementPaths: bool,
    pub MoveMaps: struct{ pub Enable: bool, },
    pub Minigob: struct{ pub Manabonk: struct{ pub Enable: bool, }, },
    pub Allow: struct {
      pub IP: struct {
        pub Based: struct{ pub Action: struct{ pub Logging: bool, }, },
      },
    },

    pub Calculate: struct {
      pub Creature: struct CalculateCreature {
        pub Zone: struct CalculateCreatureZone{ pub Area: struct CalculateCreatureZoneArea{ pub Data: bool, }, },
      },
      pub Gameoject: struct {
        pub Zone: struct CalculateGameojectZone{ pub Area: struct CalculateGameojectZoneArea{ pub Data: bool, }, },
      },
    },
    pub Group: struct {
      pub Raid: struct{ pub LevelRestriction: i32, },
    },
    pub LFG: struct {
      pub Location: struct{ pub All: bool, },
      pub MaxKickCount: i32,
      pub KickPreventionTimer: i32,
    },
    pub DungeonAccessRequirements: struct {
      pub PrintMode: i32,
      pub PortalAvgIlevelCheck: bool,
      pub LFGLevelDBCOverride: bool,
      pub OptionalStringID: i32,
    },
    pub ICC: struct {
      pub Buff: struct {
        pub Horde: i32,
        pub Alliance: i32,
      },
    },
    pub Item: struct{ pub SetItemTradeable: bool, },
    pub FFAPvPTimer: i32,
    pub LootNeedBeforeGreedILvlRestriction: i32,
    pub EnablePlayerSettings: bool,
    pub JoinBGAndLFG: struct{ pub Enable: bool, },
    pub LeaveGroupOnLogout: struct{ pub Enabled: bool, },
    pub QuestPOI: struct{ pub Enabled: bool, },
    pub ChangeFaction: struct{ pub MaxMoney: i32, },
    // TODO: Logging
    // Appender                           map[String]LogAppender
    // Logger                             map[String]LogLoggerConfig
    pub Log: struct{ pub Async: struct{ pub Enable: bool, }, },
    pub PacketSpoof: struct {
      pub Policy: i32,
      pub BanMode: i32,
      pub BanDuration: i32,
    },
    pub Debug: struct {
      pub Battleground: bool,
      pub Arena: bool,
    },
    pub Metric: struct {
      pub Enable: bool,
      pub Interval: i32,
      pub ConnectionInfo: struct {
        pub Hostname: String,
        pub Port: String,
        pub Database: String,
      },
      pub OverallStatusInterval: i32,
    },
  }
}

#[derive(Deserialize, Serialize, Clone, Debug)]
#[allow(non_snake_case)]
pub enum LogLevel {
    Disabled,
    Fatal,
    Error,
    Warning,
    Info,
    Debug,
    Trace,
}

#[derive(Deserialize, Serialize, Clone, Debug, PartialEq)]
#[allow(non_snake_case)]
pub struct DatabaseInfo {
    Address:       String,
    User:          String,
    Password:      String,
    DatabaseName:  String,
    WorkerThreads: u32,
    SynchThreads:  u32,
}

#[cfg(test)]
mod tests {
    use crate::common::configuration::*;

    #[test]
    fn it_reads_the_worldserver_toml_dist_file() {
        let dist = Config::toml_from_filepath::<Config, _>("env/dist/etc/app-worldserver.toml.dist")
            .unwrap()
            .worldserver
            .unwrap();
        let example = WorldserverConfig {
            RealmID: 1,
            DataDir: ".".to_string(),
            LogsDir: "".to_string(),
            TempDir: "".to_string(),
            LoginDatabaseInfo: DatabaseInfo {
                Address:       "127.0.0.1:3306".to_string(),
                User:          "acore".to_string(),
                Password:      "acore".to_string(),
                DatabaseName:  "acore_auth".to_string(),
                WorkerThreads: 1,
                SynchThreads:  1,
            },
            WorldDatabaseInfo: DatabaseInfo {
                Address:       "127.0.0.1:3306".to_string(),
                User:          "acore".to_string(),
                Password:      "acore".to_string(),
                DatabaseName:  "acore_world".to_string(),
                WorkerThreads: 1,
                SynchThreads:  1,
            },
            CharacterDatabaseInfo: DatabaseInfo {
                Address:       "127.0.0.1:3306".to_string(),
                User:          "acore".to_string(),
                Password:      "acore".to_string(),
                DatabaseName:  "acore_characters".to_string(),
                WorkerThreads: 1,
                SynchThreads:  1,
            },
            Database: Database {
                Reconnect: Reconnect {
                    Seconds:  15,
                    Attempts: 20,
                },
            },
            MaxPingTime: 30,
            WorldServerPort: "8085".to_string(),
            BindIP: "0.0.0.0".to_string(),
            ThreadPool: 2,
            IPLocationFile: "".to_string(),
            AllowLoggingIPAddressesInDatabase: true,
            UseProcessors: 0,
            ProcessPriority: true,
            Compression: 1,
            PlayerLimit: 1000,
            SaveRespawnTimeImmediately: true,
            MaxOverspeedPings: 2,
            CloseIdleConnections: true,
            SocketTimeOutTime: 900000,
            SocketTimeOutTimeActive: 60000,
            SessionAddDelay: 10000,
            MapUpdateInterval: 100,
            ChangeWeatherInterval: 600000,
            PlayerSaveInterval: 900000,
            PlayerSave: PlayerSave {
                Stats: PlayerSaveStats {
                    MinLevel:         0,
                    SaveOnlyOnLogout: true,
                },
            },
            vmap: Vmap {
                enableLOS:         true,
                enableHeight:      true,
                petLOS:            true,
                BlizzlikePvPLOS:   true,
                enableIndoorCheck: true,
            },
            DetectPosCollision: true,
            CheckGameObjectLoS: true,
            TargetPosRecalculateRange: 1.5,
            UpdateUptimeInterval: 1,
            LogDB: LogDb {
                Opt: Opt {
                    ClearInterval: 10,
                    ClearTime:     1209600,
                },
            },
            MaxCoreStuckTime: 0,
            AddonChannel: true,
            MapUpdate: MapUpdate { Threads: 1 },
            CleanCharacterDB: false,
            PersistentCharacterCleanFlags: 0,
            PreloadAllNonInstancedMapGrids: false,
            SetAllCreaturesWithWaypointMovementActive: false,
            PidFile: None,
            PacketLogFile: "".to_string(),
            GameType: 0,
            RealmZone: 1,
            World: World { RealmAvailability: true },
            StrictPlayerNames: 0,
            StrictCharterNames: 0,
            StrictPetNames: 0,
            DBC: Dbc { Locale: 255 },
            DeclinedNames: false,
            Expansion: 2,
            MinPlayerName: 2,
            MinCharterName: 2,
            MinPetName: 2,
            Guild: Guild {
                CharterCost:              1000,
                EventLogRecordsCount:     100,
                ResetHour:                6,
                BankEventLogRecordsCount: 25,
                AllowMultipleGuildMaster: false,
                BankInitialTabs:          0,
                BankTabCost0:             1000000,
                BankTabCost1:             2500000,
                BankTabCost2:             5000000,
                BankTabCost3:             10000000,
                BankTabCost4:             25000000,
                BankTabCost5:             50000000,
            },
            ArenaTeam: ArenaTeam {
                CharterCost: CharterCost {
                    T_2v2: 800000,
                    T_3v3: 1200000,
                    T_5v5: 2000000,
                },
            },
            MaxWhoListReturns: 49,
            CharacterCreating: CharacterCreating {
                MinLevelForHeroicCharacter: 55,
                Disabled:                   Disabled {
                    DisableFaction: 0,
                    RaceMask:       0,
                    ClassMask:      0,
                },
            },
            CharactersPerAccount: 50,
            CharactersPerRealm: 10,
            HeroicCharactersPerRealm: 1,
            SkipCinematics: 0,
            MaxPlayerLevel: 80,
            MinDualSpecLevel: 40,
            StartPlayerLevel: 1,
            StartHeroicPlayerLevel: 55,
            StartPlayerMoney: 0,
            StartHeroicPlayerMoney: 2000,
            MaxHonorPoints: 75000,
            MaxHonorPointsMoneyPerPoint: 0,
            StartHonorPoints: 0,
            MaxArenaPoints: 10000,
            StartArenaPoints: 0,
            RecruitAFriend: RecruitAFriend {
                MaxLevel:      60,
                MaxDifference: 4,
            },
            InstantLogout: 1,
            PreventAFKLogout: 0,
            DisableWaterBreath: 4,
            AllFlightPaths: false,
            InstantFlightPaths: 0,
            AlwaysMaxSkillForLevel: false,
            ActivateWeather: true,
            Instance: Instance {
                IgnoreLevel:                false,
                IgnoreRaid:                 false,
                GMSummonPlayer:             false,
                ResetTimeHour:              4,
                UnloadDelay:                1800000,
                SharedNormalHeroicId:       true,
                ResetTimeRelativeTimestamp: 1135814400,
            },
            Quests: Quests {
                EnableQuestTracker: false,
                LowLevelHideDiff:   4,
                HighLevelHideDiff:  7,
                IgnoreRaid:         false,
                IgnoreAutoAccept:   false,
                IgnoreAutoComplete: false,
            },
            Calendar: Calendar { DeleteOldEventsHour: 6 },
            MaxPrimaryTradeSkill: 2,
            MinPetitionSigns: 9,
            MaxGroupXPDistance: 74,
            MaxRecruitAFriendBonusDistance: 100,
            MailDeliveryDelay: 3600,
            OffhandCheckAtSpellUnlearn: true,
            ClientCacheVersion: 0,
            Event: Event { Announce: false },
            BeepAtStart: true,
            FlashAtStart: true,
            Motd: "Welcome to an AzerothCore server.".to_string(),
            Server: Server { LoginInfo: 0 },
            Command: Command { LookupMaxResults: 0 },
            AllowTickets: true,
            DeletedCharacterTicketTrace: false,
            DungeonFinder: DungeonFinder { OptionsMask: 5 },
            AccountInstancesPerHour: 5,
            BirthdayTime: 1222964635,
            IsContinentTransport: IsContinentTransport { Enabled: true },
            IsPreloadedContinentTransport: IsPreloadedContinentTransport { Enabled: false },
            TOTPMasterSecret: "".to_string(),
            Updates: Updates {
                EnableDatabases:      7,
                AutoSetup:            true,
                Redundancy:           true,
                ArchivedRedundancy:   false,
                AllowRehash:          true,
                CleanDeadRefMaxCount: 3,
            },
            Warden: Warden {
                Enabled:               true,
                NumMemChecks:          3,
                NumLuaChecks:          1,
                NumOtherChecks:        7,
                ClientResponseDelay:   600,
                ClientCheckHoldOff:    30,
                ClientCheckFailAction: 0,
                BanDuration:           259200,
            },
            AllowTwoSide: AllowTwoSide {
                Accounts:    true,
                Interaction: Interaction {
                    Calendar: false,
                    Chat:     false,
                    Emote:    false,
                    Channel:  false,
                    Group:    false,
                    Guild:    false,
                    Auction:  false,
                    Mail:     false,
                },
                WhoList:     false,
                AddFriend:   false,
                Trade:       false,
            },
            TalentsInspecting: true,
            CreatureFamilyFleeAssistanceRadius: 30,
            CreatureFamilyAssistanceRadius: 10,
            CreatureFamilyAssistanceDelay: 2000,
            CreatureFamilyAssistancePeriod: 3000,
            CreatureFamilyFleeDelay: 7000,
            WorldBossLevelDiff: 3,
            Corpse: Corpse {
                Decay: CorpseDecay {
                    NORMAL:    60,
                    RARE:      300,
                    ELITE:     300,
                    RAREELITE: 300,
                    WORLDBOSS: 3600,
                },
            },
            Rate: Rate {
                Corpse:               RateCorpse {
                    Decay: Decay { Looted: 0.5 },
                },
                Creature:             RateCreature {
                    Aggro:  1.0,
                    Normal: Normal {
                        Damage:      1.0,
                        SpellDamage: 1.0,
                        HP:          1.0,
                    },
                    Elite:  RateElite {
                        Elite:     RateEliteElite {
                            Damage:      1.0,
                            SpellDamage: 1.0,
                            HP:          1.0,
                        },
                        RARE:      Rare {
                            Damage:      1.0,
                            SpellDamage: 1.0,
                            HP:          1.0,
                        },
                        RAREELITE: Rareelite {
                            Damage:      1.0,
                            SpellDamage: 1.0,
                            HP:          1.0,
                        },
                        WORLDBOSS: Worldboss {
                            Damage:      1.0,
                            SpellDamage: 1.0,
                            HP:          1.0,
                        },
                    },
                },
                Health:               1.0,
                Mana:                 1.0,
                Rage:                 Rage { Income: 1.0, Loss: 1.0 },
                RunicPower:           RunicPower { Income: 1.0, Loss: 1.0 },
                Focus:                1.0,
                Energy:               1.0,
                Loyalty:              1.0,
                Skill:                Skill { Discovery: 1.0 },
                Drop:                 Drop {
                    Item:  DropItem {
                        Poor:             1.0,
                        Normal:           1.0,
                        Uncommon:         1.0,
                        Rare:             1.0,
                        Epic:             1.0,
                        Legendary:        1.0,
                        Artifact:         1.0,
                        Referenced:       1.0,
                        ReferencedAmount: 1.0,
                    },
                    Money: 1.0,
                },
                RewardBonusMoney:     1.0,
                SellValue:            SellValue {
                    Item: SellValueItem {
                        Poor:      1.0,
                        Normal:    1.0,
                        Uncommon:  1.0,
                        Rare:      1.0,
                        Epic:      1.0,
                        Legendary: 1.0,
                        Artifact:  1.0,
                        Heirloom:  1.0,
                    },
                },
                BuyValue:             BuyValue {
                    Item: BuyValueItem {
                        Poor:      1.0,
                        Normal:    1.0,
                        Uncommon:  1.0,
                        Rare:      1.0,
                        Epic:      1.0,
                        Legendary: 1.0,
                        Artifact:  1.0,
                        Heirloom:  1.0,
                    },
                },
                XP:                   Xp {
                    Kill:                 1.0,
                    Quest:                Quest {
                        General: 1.0,
                        DF:      1.0,
                    },
                    Explore:              1.0,
                    Pet:                  1.0,
                    BattlegroundKillAV:   1.0,
                    BattlegroundKillWSG:  1.0,
                    BattlegroundKillAB:   1.0,
                    BattlegroundKillEOTS: 1.0,
                    BattlegroundKillSOTA: 1.0,
                    BattlegroundKillIC:   1.0,
                },
                RepairCost:           1.0,
                Rest:                 Rest {
                    InGame:  1.0,
                    Offline: Offline {
                        InTavernOrCity: 1.0,
                        InWilderness:   1.0,
                    },
                },
                Damage:               Damage { Fall: 1.0 },
                Auction:              Auction {
                    Time:    1.0,
                    Deposit: 1.0,
                    Cut:     1.0,
                },
                Honor:                1.0,
                ArenaPoints:          1.0,
                Talent:               1.0,
                Reputation:           Reputation {
                    Gain:                1.0,
                    LowLevel:            LowLevel { Kill: 1.0, Quest: 1.0 },
                    RecruitAFriendBonus: 0.1,
                },
                MoveSpeed:            1.0,
                InstanceResetTime:    1.0,
                Pet:                  Pet { LevelXP: 0.05 },
                MissChanceMultiplier: MissChanceMultiplier {
                    TargetCreature:    11.0,
                    TargetPlayer:      7.0,
                    OnlyAffectsPlayer: 0.0,
                },
            },
            ListenRange: ListenRange {
                Say:       40,
                TextEmote: 40,
                Yell:      300,
            },
            Creature: Creature {
                MovingStopTimeForPlayer: 180000,
            },
            WaypointMovementStopTimeForPlayer: 120,
            NpcEvadeIfTargetIsUnreachable: 5,
            NpcRegenHPIfTargetIsUnreachable: true,
            NpcRegenHPTimeIfTargetIsUnreachable: 10,
            Creatures: Creatures {
                CustomIDs: vec![190010, 55005, 999991, 25462, 98888, 601014, 34567, 34568],
            },
            ChatFakeMessagePreventing: true,
            ChatStrictLinkChecking: ChatStrictLinkChecking { Severity: 0, Kick: 0 },
            ChatFlood: ChatFlood {
                MessageCount:      10,
                MessageDelay:      1,
                AddonMessageCount: 100,
                AddonMessageDelay: 1,
                MuteTime:          10,
            },
            Chat: Chat {
                MuteFirstLogin:     false,
                MuteTimeFirstLogin: 120,
            },
            Channel: Channel {
                RestrictedLfg:     true,
                SilentlyGMJoin:    false,
                ModerationGMLevel: 1,
            },
            ChatLevelReq: ChatLevelReq {
                Channel: 1,
                Whisper: 1,
                Say:     1,
            },
            PartyLevelReq: 1,
            AllowPlayerCommands: true,
            PreserveCustomChannels: true,
            PreserveCustomChannelDuration: 14,
            GM: Gm {
                LoginState:    2,
                Visible:       2,
                Chat:          2,
                WhisperingTo:  2,
                InGMList:      InGmList { Level: 3 },
                InWhoList:     InWhoList { Level: 3 },
                StartLevel:    1,
                AllowInvite:   false,
                AllowFriend:   false,
                LowerSecurity: false,
                TicketSystem:  TicketSystem { ChanceOfGMSurvey: 50 },
            },
            Visibility: Visibility {
                GroupMode:          1,
                Distance:           Distance {
                    Continents: 90,
                    Instances:  120,
                    BGArenas:   180,
                },
                Notify:             Notify {
                    Period: Period {
                        OnContinents: 1000,
                        InInstances:  1000,
                        InBGArenas:   1000,
                    },
                },
                ObjectSparkles:     true,
                ObjectQuestMarkers: true,
            },
            WaterBreath: WaterBreath { Timer: 180000 },
            EnableLowLevelRegenBoost: true,
            SkillGain: SkillGain {
                Crafting:  1,
                Defense:   1,
                Gathering: 1,
                Weapon:    1,
            },
            SkillChance: SkillChance {
                Prospecting:   false,
                Milling:       false,
                Orange:        100,
                Yellow:        75,
                Green:         25,
                Grey:          0,
                MiningSteps:   0,
                SkinningSteps: 0,
            },
            DurabilityLoss: DurabilityLoss {
                InPvP:   false,
                OnDeath: 10,
            },
            DurabilityLossChance: DurabilityLossChance {
                Damage: 0.5,
                Absorb: 0.5,
                Parry:  0.05,
                Block:  0.05,
            },
            Death: Death {
                SicknessLevel:      11,
                CorpseReclaimDelay: CorpseReclaimDelay { PvP: true, PvE: false },
                Bones:              Bones {
                    World:               true,
                    BattlegroundOrArena: true,
                },
            },
            Die: Die {
                Command: DieCommand { Mode: true },
            },
            Stats: Stats {
                Limits: Limits {
                    Enable: false,
                    Dodge:  95.0,
                    Parry:  95.0,
                    Block:  95.0,
                    Crit:   95.0,
                },
            },
            AutoBroadcast: AutoBroadcast {
                On:              false,
                Center:          0,
                Timer:           60000,
                MinDisableLevel: 0,
            },
            Battleground: Battleground {
                CastDeserter:             true,
                QueueAnnouncer:           BattlegroundQueueAnnouncer {
                    Enable:         false,
                    Limit:          Limit {
                        MinLevel:   0,
                        MinPlayers: 3,
                    },
                    SpamProtection: SpamProtection { Delay: 30 },
                    PlayerOnly:     false,
                    Timed:          false,
                    Timer:          30000,
                },
                PrematureFinishTimer:     300000,
                PremadeGroupWaitForMatch: 1800000,
                GiveXPForKills:           false,
                Random:                   Random { ResetHour: 6 },
                StoreStatistics:          StoreStatistics { Enable: true },
                TrackDeserters:           TrackDeserters { Enable: true },
                InvitationType:           0,
                ReportAFK:                ReportAfk { Number: 3, Timer: 4 },
                DisableQuestShareInBG:    false,
                DisableReadyCheckInBG:    false,
                RewardWinnerHonorFirst:   30,
                RewardWinnerArenaFirst:   25,
                RewardWinnerHonorLast:    15,
                RewardWinnerArenaLast:    0,
                RewardLoserHonorFirst:    5,
                RewardLoserHonorLast:     5,
                PlayerRespawn:            30,
                RestorationBuffRespawn:   20,
                BerserkingBuffRespawn:    120,
                SpeedBuffRespawn:         150,
            },
            Wintergrasp: Wintergrasp {
                Enable:            1,
                PlayerMax:         120,
                PlayerMin:         0,
                PlayerMinLvl:      77,
                BattleTimer:       30,
                NoBattleTimer:     150,
                CrashRestartTimer: 10,
            },
            Arena: Arena {
                MaxRatingDifference:           150,
                RatingDiscardTimer:            600000,
                PreviousOpponentsDiscardTimer: 120000,
                AutoDistributePoints:          false,
                AutoDistributeInterval:        7,
                GamesRequired:                 10,
                QueueAnnouncer:                QueueAnnouncer {
                    Enable:     false,
                    PlayerOnly: false,
                },
                ArenaSeason:                   ArenaSeason {
                    ID:         8,
                    InProgress: true,
                },
                ArenaStartRating:              0,
                ArenaStartPersonalRating:      0,
                ArenaStartMatchmakerRating:    1500,
                ArenaWinRatingModifier1:       48.0,
                ArenaWinRatingModifier2:       24.0,
                ArenaLoseRatingModifier:       24.0,
                ArenaMatchmakerRatingModifier: 24.0,
            },
            Console: Console { Enable: true },
            Ra: Ra {
                Enable:   false,
                IP:       "0.0.0.0".to_string(),
                Port:     "3443".to_string(),
                MinLevel: 3,
            },
            SOAP: Soap {
                Enabled: false,
                IP:      "127.0.0.1".to_string(),
                Port:    "7878".to_string(),
            },
            CharDelete: CharDelete {
                Method:   0,
                MinLevel: 0,
                KeepDays: 30,
            },
            ItemDelete: ItemDelete {
                Method:    0,
                Vendor:    0,
                Quality:   3,
                ItemLevel: 80,
            },
            HonorPointsAfterDuel: 0,
            AlwaysMaxWeaponSkill: false,
            PvPToken: PvPToken {
                Enable:       false,
                MapAllowType: 4,
                ItemID:       29434,
                ItemCount:    1,
            },
            NoResetTalentsCost: false,
            ToggleXP: ToggleXp { Cost: 100000 },
            ShowKickInWorld: false,
            ShowMuteInWorld: false,
            ShowBanInWorld: false,
            RecordUpdateTimeDiffInterval: 300000,
            MinRecordUpdateTimeDiff: 100,
            PlayerStart: PlayerStart {
                String:        "".to_string(),
                AllReputation: false,
                CustomSpells:  false,
                MapsExplored:  false,
            },
            LevelReq: LevelReq {
                Trade:   1,
                Ticket:  1,
                Auction: 1,
                Mail:    1,
            },
            PlayerDump: PlayerDump {
                DisallowPaths:     true,
                DisallowOverwrite: true,
            },
            DisconnectToleranceInterval: 0,
            MonsterSight: 50.000000,
            StrictChannelNames: 0,
            TeleportTimeoutNear: 25,
            TeleportTimeoutFar: 45,
            MaxAllowedMMRDrop: 500,
            EnableLoginAfterDC: true,
            DontCacheRandomMovementPaths: false,
            MoveMaps: MoveMaps { Enable: true },
            Minigob: Minigob {
                Manabonk: Manabonk { Enable: true },
            },
            Allow: Allow {
                IP: Ip {
                    Based: Based {
                        Action: Action { Logging: false },
                    },
                },
            },
            Calculate: Calculate {
                Creature:  CalculateCreature {
                    Zone: CalculateCreatureZone {
                        Area: CalculateCreatureZoneArea { Data: false },
                    },
                },
                Gameoject: Gameoject {
                    Zone: CalculateGameojectZone {
                        Area: CalculateGameojectZoneArea { Data: false },
                    },
                },
            },
            Group: Group {
                Raid: Raid { LevelRestriction: 10 },
            },
            LFG: Lfg {
                Location:            Location { All: false },
                MaxKickCount:        2,
                KickPreventionTimer: 900,
            },
            DungeonAccessRequirements: DungeonAccessRequirements {
                PrintMode:            1,
                PortalAvgIlevelCheck: false,
                LFGLevelDBCOverride:  false,
                OptionalStringID:     0,
            },
            ICC: Icc {
                Buff: Buff {
                    Horde:    73822,
                    Alliance: 73828,
                },
            },
            Item: Item { SetItemTradeable: true },
            FFAPvPTimer: 30,
            LootNeedBeforeGreedILvlRestriction: 70,
            EnablePlayerSettings: false,
            JoinBGAndLFG: JoinBgAndLfg { Enable: false },
            LeaveGroupOnLogout: LeaveGroupOnLogout { Enabled: true },
            QuestPOI: QuestPoi { Enabled: true },
            ChangeFaction: ChangeFaction { MaxMoney: 0 },
            Log: Log {
                Async: Async { Enable: false },
            },
            PacketSpoof: PacketSpoof {
                Policy:      1,
                BanMode:     0,
                BanDuration: 86400,
            },
            Debug: Debug {
                Battleground: false,
                Arena:        false,
            },
            Metric: Metric {
                Enable:                false,
                Interval:              10,
                ConnectionInfo:        ConnectionInfo {
                    Hostname: "127.0.0.1".to_string(),
                    Port:     "8086".to_string(),
                    Database: "worldserver".to_string(),
                },
                OverallStatusInterval: 1,
            },
        };
        assert_eq!(dist, example);
    }
}
